diff --git a/minisat-2.0.orig/core/Main.C b/minisat-2.0/core/Main.C
index acef32c..4e3c7cd 100644
--- a/minisat-2.0.orig/core/Main.C
+++ b/minisat-2.0/core/Main.C
@@ -21,6 +21,8 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include <cstring>
 #include <stdint.h>
 #include <errno.h>
+#define __STDC_FORMAT_MACROS 1
+#include <inttypes.h>
 
 #include <signal.h>
 #include <zlib.h>
@@ -56,7 +58,7 @@ static inline int memReadStat(int field)
     if (in == NULL) return 0;
     int     value;
     for (; field >= 0; field--)
-        fscanf(in, "%d", &value);
+        if (fscanf(in, "%d", &value) != 1) break;
     fclose(in);
     return value;
 }
@@ -143,7 +145,7 @@ static void readClause(B& in, Solver& S, vec<Lit>& lits) {
 }
 
 template<class B>
-static bool match(B& in, char* str) {
+static bool match(B& in, const char* str) {
     for (; *str != 0; ++str, ++in)
         if (*str != *in)
             return false;
@@ -189,11 +191,11 @@ void printStats(Solver& solver)
 {
     double   cpu_time = cpuTime();
     uint64_t mem_used = memUsed();
-    reportf("restarts              : %lld\n", solver.starts);
-    reportf("conflicts             : %-12lld   (%.0f /sec)\n", solver.conflicts   , solver.conflicts   /cpu_time);
-    reportf("decisions             : %-12lld   (%4.2f %% random) (%.0f /sec)\n", solver.decisions, (float)solver.rnd_decisions*100 / (float)solver.decisions, solver.decisions   /cpu_time);
-    reportf("propagations          : %-12lld   (%.0f /sec)\n", solver.propagations, solver.propagations/cpu_time);
-    reportf("conflict literals     : %-12lld   (%4.2f %% deleted)\n", solver.tot_literals, (solver.max_literals - solver.tot_literals)*100 / (double)solver.max_literals);
+    reportf("restarts              : %" PRIu64 "\n", solver.starts);
+    reportf("conflicts             : %-12" PRIu64 "   (%.0f /sec)\n", solver.conflicts   , solver.conflicts   /cpu_time);
+    reportf("decisions             : %-12" PRIu64 "   (%4.2f %% random) (%.0f /sec)\n", solver.decisions, (float)solver.rnd_decisions*100 / (float)solver.decisions, solver.decisions   /cpu_time);
+    reportf("propagations          : %-12" PRIu64 "   (%.0f /sec)\n", solver.propagations, solver.propagations/cpu_time);
+    reportf("conflict literals     : %-12" PRIu64 "   (%4.2f %% deleted)\n", solver.tot_literals, (solver.max_literals - solver.tot_literals)*100 / (double)solver.max_literals);
     if (mem_used != 0) reportf("Memory used           : %.2f MB\n", mem_used / 1048576.0);
     reportf("CPU time              : %g s\n", cpu_time);
 }
diff --git a/minisat-2.0.orig/core/Solver.C b/minisat-2.0/core/Solver.C
index 404f4da..d066ef7 100644
--- a/minisat-2.0.orig/core/Solver.C
+++ b/minisat-2.0/core/Solver.C
@@ -553,8 +553,6 @@ lbool Solver::search(int nof_conflicts, int nof_learnts)
 
     starts++;
 
-    bool first = true;
-
     for (;;){
         Clause* confl = propagate();
         if (confl != NULL){
@@ -562,8 +560,6 @@ lbool Solver::search(int nof_conflicts, int nof_learnts)
             conflicts++; conflictC++;
             if (decisionLevel() == 0) return l_False;
 
-            first = false;
-
             learnt_clause.clear();
             analyze(confl, learnt_clause, backtrack_level);
             cancelUntil(backtrack_level);
@@ -720,6 +716,7 @@ void Solver::verifyModel()
     next:;
     }
 
+    (void) failed;
     assert(!failed);
 
     reportf("Verified %d original clauses.\n", clauses.size());
diff --git a/minisat-2.0.orig/simp/Main.C b/minisat-2.0/simp/Main.C
index b6d1946..1ced3e5 100644
--- a/minisat-2.0.orig/simp/Main.C
+++ b/minisat-2.0/simp/Main.C
@@ -21,6 +21,8 @@ OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWA
 #include <cstring>
 #include <stdint.h>
 #include <errno.h>
+#define __STDC_FORMAT_MACROS 1
+#include <inttypes.h>
 
 #include <signal.h>
 #include <zlib.h>
@@ -56,7 +58,7 @@ static inline int memReadStat(int field)
     if (in == NULL) return 0;
     int     value;
     for (; field >= 0; field--)
-        fscanf(in, "%d", &value);
+        if (fscanf(in, "%d", &value) != 1) break;
     fclose(in);
     return value;
 }
@@ -144,7 +146,7 @@ static void readClause(B& in, SimpSolver& S, vec<Lit>& lits) {
 }
 
 template<class B>
-static bool match(B& in, char* str) {
+static bool match(B& in, const char* str) {
     for (; *str != 0; ++str, ++in)
         if (*str != *in)
             return false;
@@ -193,11 +195,11 @@ void printStats(Solver& S)
 {
     double   cpu_time = cpuTime();
     uint64_t mem_used = memUsed();
-    reportf("restarts              : %lld\n", S.starts);
-    reportf("conflicts             : %-12lld   (%.0f /sec)\n", S.conflicts   , S.conflicts   /cpu_time);
-    reportf("decisions             : %-12lld   (%4.2f %% random) (%.0f /sec)\n", S.decisions, (float)S.rnd_decisions*100 / (float)S.decisions, S.decisions   /cpu_time);
-    reportf("propagations          : %-12lld   (%.0f /sec)\n", S.propagations, S.propagations/cpu_time);
-    reportf("conflict literals     : %-12lld   (%4.2f %% deleted)\n", S.tot_literals, (S.max_literals - S.tot_literals)*100 / (double)S.max_literals);
+    reportf("restarts              : %" PRIu64 "\n", S.starts);
+    reportf("conflicts             : %-12" PRIu64 "   (%.0f /sec)\n", S.conflicts   , S.conflicts   /cpu_time);
+    reportf("decisions             : %-12" PRIu64 "   (%4.2f %% random) (%.0f /sec)\n", S.decisions, (float)S.rnd_decisions*100 / (float)S.decisions, S.decisions   /cpu_time);
+    reportf("propagations          : %-12" PRIu64 "   (%.0f /sec)\n", S.propagations, S.propagations/cpu_time);
+    reportf("conflict literals     : %-12" PRIu64 "   (%4.2f %% deleted)\n", S.tot_literals, (S.max_literals - S.tot_literals)*100 / (double)S.max_literals);
     if (mem_used != 0) reportf("Memory used           : %.2f MB\n", mem_used / 1048576.0);
     reportf("CPU time              : %g s\n", cpu_time);
 }
@@ -362,7 +364,7 @@ int main(int argc, char** argv)
         FILE* in = fopen(freeze, "rb");
         for(;;){
             Var x;
-            fscanf(in, "%d", &x);
+            if (fscanf(in, "%d", &x) != 1) break;
             if (x == 0) break;
             x--;
 
diff --git a/minisat-2.0.orig/simp/SimpSolver.C b/minisat-2.0/simp/SimpSolver.C
index 22121c3..82d1131 100644
--- a/minisat-2.0.orig/simp/SimpSolver.C
+++ b/minisat-2.0/simp/SimpSolver.C
@@ -224,11 +224,12 @@ bool SimpSolver::merge(const Clause& _ps, const Clause& _qs, Var v, vec<Lit>& ou
     for (int i = 0; i < qs.size(); i++){
         if (var(qs[i]) != v){
             for (int j = 0; j < ps.size(); j++)
-                if (var(ps[j]) == var(qs[i]))
+                if (var(ps[j]) == var(qs[i])) {
                     if (ps[j] == ~qs[i])
                         return false;
                     else
                         goto next;
+                }
             out_clause.push(qs[i]);
         }
         next:;
@@ -256,11 +257,12 @@ bool SimpSolver::merge(const Clause& _ps, const Clause& _qs, Var v)
     for (int i = 0; i < qs.size(); i++){
         if (var(__qs[i]) != v){
             for (int j = 0; j < ps.size(); j++)
-                if (var(__ps[j]) == var(__qs[i]))
+                if (var(__ps[j]) == var(__qs[i])) {
                     if (__ps[j] == ~__qs[i])
                         return false;
                     else
                         goto next;
+                }
         }
         next:;
     }
@@ -439,6 +441,7 @@ void SimpSolver::verifyModel()
             next:;
             }
 
+    (void) failed;
     assert(!failed);
     reportf("Verified %d eliminated clauses.\n", cnt);
 }
